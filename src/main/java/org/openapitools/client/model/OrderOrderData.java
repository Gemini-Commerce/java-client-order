/*
 * order Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.OrderCurrency;
import org.openapitools.client.model.OrderDataCustomerInfo;
import org.openapitools.client.model.OrderDataDocument;
import org.openapitools.client.model.OrderDataHistory;
import org.openapitools.client.model.OrderDataPaymentInfo;
import org.openapitools.client.model.OrderDataPromotionInfo;
import org.openapitools.client.model.OrderDataShipmentInfo;
import org.openapitools.client.model.OrderDataSubtotal;
import org.openapitools.client.model.OrderDataTotal;
import org.openapitools.client.model.OrderFulfillment;
import org.openapitools.client.model.OrderOrderDataItem;
import org.openapitools.client.model.OrderPayment;
import org.openapitools.client.model.OrderPostalAddress;
import org.openapitools.client.model.OrderShipment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Order.JSON;

/**
 * OrderOrderData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-12T15:01:22.022764061Z[Etc/UTC]")
public class OrderOrderData {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GRN = "grn";
  @SerializedName(SERIALIZED_NAME_GRN)
  private String grn;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_MARKET = "market";
  @SerializedName(SERIALIZED_NAME_MARKET)
  private String market;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private Object additionalInfo;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<OrderDataDocument> documents;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderOrderDataItem> items;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<OrderPayment> payments;

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private List<OrderShipment> shipments;

  public static final String SERIALIZED_NAME_PAYMENTS_INFO = "paymentsInfo";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_INFO)
  private List<OrderDataPaymentInfo> paymentsInfo;

  public static final String SERIALIZED_NAME_SHIPMENTS_INFO = "shipmentsInfo";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS_INFO)
  private List<OrderDataShipmentInfo> shipmentsInfo;

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<OrderDataPromotionInfo> promotions;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private OrderCurrency currency = OrderCurrency.XXX;

  public static final String SERIALIZED_NAME_SUBTOTALS = "subtotals";
  @SerializedName(SERIALIZED_NAME_SUBTOTALS)
  private Map<String, OrderDataSubtotal> subtotals = new HashMap<>();

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private Map<String, OrderDataTotal> totals = new HashMap<>();

  public static final String SERIALIZED_NAME_VAT_INCLUDED = "vatIncluded";
  @SerializedName(SERIALIZED_NAME_VAT_INCLUDED)
  private Boolean vatIncluded;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private OrderPostalAddress billingAddress;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private OrderPostalAddress shippingAddress;

  public static final String SERIALIZED_NAME_CUSTOMER_INFO = "customerInfo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_INFO)
  private OrderDataCustomerInfo customerInfo;

  public static final String SERIALIZED_NAME_CART_GRN = "cartGrn";
  @SerializedName(SERIALIZED_NAME_CART_GRN)
  private String cartGrn;

  public static final String SERIALIZED_NAME_ON_HOLD = "onHold";
  @SerializedName(SERIALIZED_NAME_ON_HOLD)
  private Boolean onHold;

  public static final String SERIALIZED_NAME_HISTORY_EVENTS = "historyEvents";
  @SerializedName(SERIALIZED_NAME_HISTORY_EVENTS)
  private List<OrderDataHistory> historyEvents;

  public static final String SERIALIZED_NAME_FULFILLMENTS = "fulfillments";
  @SerializedName(SERIALIZED_NAME_FULFILLMENTS)
  private List<OrderFulfillment> fulfillments;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_INSERTED_AT = "insertedAt";
  @SerializedName(SERIALIZED_NAME_INSERTED_AT)
  private OffsetDateTime insertedAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public OrderOrderData() {
  }

  public OrderOrderData(
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     String id, 
     String grn, 
     String status, 
     List<OrderFulfillment> fulfillments, 
     OffsetDateTime insertedAt, 
     OffsetDateTime deletedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.id = id;
    this.grn = grn;
    this.status = status;
    this.fulfillments = fulfillments;
    this.insertedAt = insertedAt;
    this.deletedAt = deletedAt;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



   /**
   * Get grn
   * @return grn
  **/
  @javax.annotation.Nullable
  public String getGrn() {
    return grn;
  }



  public OrderOrderData number(String number) {
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  public OrderOrderData channel(String channel) {
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public OrderOrderData market(String market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @javax.annotation.Nullable
  public String getMarket() {
    return market;
  }

  public void setMarket(String market) {
    this.market = market;
  }


  public OrderOrderData locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @javax.annotation.Nonnull
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public OrderOrderData additionalInfo(Object additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

   /**
   * Get additionalInfo
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  public Object getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(Object additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public OrderOrderData documents(List<OrderDataDocument> documents) {
    this.documents = documents;
    return this;
  }

  public OrderOrderData addDocumentsItem(OrderDataDocument documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * Get documents
   * @return documents
  **/
  @javax.annotation.Nullable
  public List<OrderDataDocument> getDocuments() {
    return documents;
  }

  public void setDocuments(List<OrderDataDocument> documents) {
    this.documents = documents;
  }


  public OrderOrderData items(List<OrderOrderDataItem> items) {
    this.items = items;
    return this;
  }

  public OrderOrderData addItemsItem(OrderOrderDataItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  public List<OrderOrderDataItem> getItems() {
    return items;
  }

  public void setItems(List<OrderOrderDataItem> items) {
    this.items = items;
  }


  public OrderOrderData payments(List<OrderPayment> payments) {
    this.payments = payments;
    return this;
  }

  public OrderOrderData addPaymentsItem(OrderPayment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

   /**
   * Get payments
   * @return payments
  **/
  @javax.annotation.Nullable
  public List<OrderPayment> getPayments() {
    return payments;
  }

  public void setPayments(List<OrderPayment> payments) {
    this.payments = payments;
  }


  public OrderOrderData shipments(List<OrderShipment> shipments) {
    this.shipments = shipments;
    return this;
  }

  public OrderOrderData addShipmentsItem(OrderShipment shipmentsItem) {
    if (this.shipments == null) {
      this.shipments = new ArrayList<>();
    }
    this.shipments.add(shipmentsItem);
    return this;
  }

   /**
   * Get shipments
   * @return shipments
  **/
  @javax.annotation.Nullable
  public List<OrderShipment> getShipments() {
    return shipments;
  }

  public void setShipments(List<OrderShipment> shipments) {
    this.shipments = shipments;
  }


  public OrderOrderData paymentsInfo(List<OrderDataPaymentInfo> paymentsInfo) {
    this.paymentsInfo = paymentsInfo;
    return this;
  }

  public OrderOrderData addPaymentsInfoItem(OrderDataPaymentInfo paymentsInfoItem) {
    if (this.paymentsInfo == null) {
      this.paymentsInfo = new ArrayList<>();
    }
    this.paymentsInfo.add(paymentsInfoItem);
    return this;
  }

   /**
   * Get paymentsInfo
   * @return paymentsInfo
  **/
  @javax.annotation.Nullable
  public List<OrderDataPaymentInfo> getPaymentsInfo() {
    return paymentsInfo;
  }

  public void setPaymentsInfo(List<OrderDataPaymentInfo> paymentsInfo) {
    this.paymentsInfo = paymentsInfo;
  }


  public OrderOrderData shipmentsInfo(List<OrderDataShipmentInfo> shipmentsInfo) {
    this.shipmentsInfo = shipmentsInfo;
    return this;
  }

  public OrderOrderData addShipmentsInfoItem(OrderDataShipmentInfo shipmentsInfoItem) {
    if (this.shipmentsInfo == null) {
      this.shipmentsInfo = new ArrayList<>();
    }
    this.shipmentsInfo.add(shipmentsInfoItem);
    return this;
  }

   /**
   * Get shipmentsInfo
   * @return shipmentsInfo
  **/
  @javax.annotation.Nullable
  public List<OrderDataShipmentInfo> getShipmentsInfo() {
    return shipmentsInfo;
  }

  public void setShipmentsInfo(List<OrderDataShipmentInfo> shipmentsInfo) {
    this.shipmentsInfo = shipmentsInfo;
  }


  public OrderOrderData promotions(List<OrderDataPromotionInfo> promotions) {
    this.promotions = promotions;
    return this;
  }

  public OrderOrderData addPromotionsItem(OrderDataPromotionInfo promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

   /**
   * Get promotions
   * @return promotions
  **/
  @javax.annotation.Nullable
  public List<OrderDataPromotionInfo> getPromotions() {
    return promotions;
  }

  public void setPromotions(List<OrderDataPromotionInfo> promotions) {
    this.promotions = promotions;
  }


  public OrderOrderData currency(OrderCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  public OrderCurrency getCurrency() {
    return currency;
  }

  public void setCurrency(OrderCurrency currency) {
    this.currency = currency;
  }


  public OrderOrderData subtotals(Map<String, OrderDataSubtotal> subtotals) {
    this.subtotals = subtotals;
    return this;
  }

  public OrderOrderData putSubtotalsItem(String key, OrderDataSubtotal subtotalsItem) {
    if (this.subtotals == null) {
      this.subtotals = new HashMap<>();
    }
    this.subtotals.put(key, subtotalsItem);
    return this;
  }

   /**
   * Get subtotals
   * @return subtotals
  **/
  @javax.annotation.Nullable
  public Map<String, OrderDataSubtotal> getSubtotals() {
    return subtotals;
  }

  public void setSubtotals(Map<String, OrderDataSubtotal> subtotals) {
    this.subtotals = subtotals;
  }


  public OrderOrderData totals(Map<String, OrderDataTotal> totals) {
    this.totals = totals;
    return this;
  }

  public OrderOrderData putTotalsItem(String key, OrderDataTotal totalsItem) {
    if (this.totals == null) {
      this.totals = new HashMap<>();
    }
    this.totals.put(key, totalsItem);
    return this;
  }

   /**
   * Get totals
   * @return totals
  **/
  @javax.annotation.Nullable
  public Map<String, OrderDataTotal> getTotals() {
    return totals;
  }

  public void setTotals(Map<String, OrderDataTotal> totals) {
    this.totals = totals;
  }


  public OrderOrderData vatIncluded(Boolean vatIncluded) {
    this.vatIncluded = vatIncluded;
    return this;
  }

   /**
   * Get vatIncluded
   * @return vatIncluded
  **/
  @javax.annotation.Nullable
  public Boolean getVatIncluded() {
    return vatIncluded;
  }

  public void setVatIncluded(Boolean vatIncluded) {
    this.vatIncluded = vatIncluded;
  }


  public OrderOrderData billingAddress(OrderPostalAddress billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  public OrderPostalAddress getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(OrderPostalAddress billingAddress) {
    this.billingAddress = billingAddress;
  }


  public OrderOrderData shippingAddress(OrderPostalAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @javax.annotation.Nullable
  public OrderPostalAddress getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(OrderPostalAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public OrderOrderData customerInfo(OrderDataCustomerInfo customerInfo) {
    this.customerInfo = customerInfo;
    return this;
  }

   /**
   * Get customerInfo
   * @return customerInfo
  **/
  @javax.annotation.Nullable
  public OrderDataCustomerInfo getCustomerInfo() {
    return customerInfo;
  }

  public void setCustomerInfo(OrderDataCustomerInfo customerInfo) {
    this.customerInfo = customerInfo;
  }


  public OrderOrderData cartGrn(String cartGrn) {
    this.cartGrn = cartGrn;
    return this;
  }

   /**
   * Get cartGrn
   * @return cartGrn
  **/
  @javax.annotation.Nullable
  public String getCartGrn() {
    return cartGrn;
  }

  public void setCartGrn(String cartGrn) {
    this.cartGrn = cartGrn;
  }


  public OrderOrderData onHold(Boolean onHold) {
    this.onHold = onHold;
    return this;
  }

   /**
   * Get onHold
   * @return onHold
  **/
  @javax.annotation.Nullable
  public Boolean getOnHold() {
    return onHold;
  }

  public void setOnHold(Boolean onHold) {
    this.onHold = onHold;
  }


  public OrderOrderData historyEvents(List<OrderDataHistory> historyEvents) {
    this.historyEvents = historyEvents;
    return this;
  }

  public OrderOrderData addHistoryEventsItem(OrderDataHistory historyEventsItem) {
    if (this.historyEvents == null) {
      this.historyEvents = new ArrayList<>();
    }
    this.historyEvents.add(historyEventsItem);
    return this;
  }

   /**
   * Get historyEvents
   * @return historyEvents
  **/
  @javax.annotation.Nullable
  public List<OrderDataHistory> getHistoryEvents() {
    return historyEvents;
  }

  public void setHistoryEvents(List<OrderDataHistory> historyEvents) {
    this.historyEvents = historyEvents;
  }


   /**
   * Get fulfillments
   * @return fulfillments
  **/
  @javax.annotation.Nullable
  public List<OrderFulfillment> getFulfillments() {
    return fulfillments;
  }



  public OrderOrderData notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public OrderOrderData isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * this field is used to delete an order in \&quot;soft-delete mode\&quot;. This field must be used from get/list endpoint to exclude these orders.
   * @return isDeleted
  **/
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


   /**
   * this field is used to save the original created_at order date. The created_at field is used to filter data.
   * @return insertedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getInsertedAt() {
    return insertedAt;
  }



   /**
   * Get deletedAt
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderOrderData orderOrderData = (OrderOrderData) o;
    return Objects.equals(this.createdAt, orderOrderData.createdAt) &&
        Objects.equals(this.updatedAt, orderOrderData.updatedAt) &&
        Objects.equals(this.id, orderOrderData.id) &&
        Objects.equals(this.grn, orderOrderData.grn) &&
        Objects.equals(this.number, orderOrderData.number) &&
        Objects.equals(this.status, orderOrderData.status) &&
        Objects.equals(this.channel, orderOrderData.channel) &&
        Objects.equals(this.market, orderOrderData.market) &&
        Objects.equals(this.locale, orderOrderData.locale) &&
        Objects.equals(this.additionalInfo, orderOrderData.additionalInfo) &&
        Objects.equals(this.documents, orderOrderData.documents) &&
        Objects.equals(this.items, orderOrderData.items) &&
        Objects.equals(this.payments, orderOrderData.payments) &&
        Objects.equals(this.shipments, orderOrderData.shipments) &&
        Objects.equals(this.paymentsInfo, orderOrderData.paymentsInfo) &&
        Objects.equals(this.shipmentsInfo, orderOrderData.shipmentsInfo) &&
        Objects.equals(this.promotions, orderOrderData.promotions) &&
        Objects.equals(this.currency, orderOrderData.currency) &&
        Objects.equals(this.subtotals, orderOrderData.subtotals) &&
        Objects.equals(this.totals, orderOrderData.totals) &&
        Objects.equals(this.vatIncluded, orderOrderData.vatIncluded) &&
        Objects.equals(this.billingAddress, orderOrderData.billingAddress) &&
        Objects.equals(this.shippingAddress, orderOrderData.shippingAddress) &&
        Objects.equals(this.customerInfo, orderOrderData.customerInfo) &&
        Objects.equals(this.cartGrn, orderOrderData.cartGrn) &&
        Objects.equals(this.onHold, orderOrderData.onHold) &&
        Objects.equals(this.historyEvents, orderOrderData.historyEvents) &&
        Objects.equals(this.fulfillments, orderOrderData.fulfillments) &&
        Objects.equals(this.notes, orderOrderData.notes) &&
        Objects.equals(this.isDeleted, orderOrderData.isDeleted) &&
        Objects.equals(this.insertedAt, orderOrderData.insertedAt) &&
        Objects.equals(this.deletedAt, orderOrderData.deletedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, updatedAt, id, grn, number, status, channel, market, locale, additionalInfo, documents, items, payments, shipments, paymentsInfo, shipmentsInfo, promotions, currency, subtotals, totals, vatIncluded, billingAddress, shippingAddress, customerInfo, cartGrn, onHold, historyEvents, fulfillments, notes, isDeleted, insertedAt, deletedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderOrderData {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    grn: ").append(toIndentedString(grn)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    paymentsInfo: ").append(toIndentedString(paymentsInfo)).append("\n");
    sb.append("    shipmentsInfo: ").append(toIndentedString(shipmentsInfo)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    subtotals: ").append(toIndentedString(subtotals)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("    vatIncluded: ").append(toIndentedString(vatIncluded)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    customerInfo: ").append(toIndentedString(customerInfo)).append("\n");
    sb.append("    cartGrn: ").append(toIndentedString(cartGrn)).append("\n");
    sb.append("    onHold: ").append(toIndentedString(onHold)).append("\n");
    sb.append("    historyEvents: ").append(toIndentedString(historyEvents)).append("\n");
    sb.append("    fulfillments: ").append(toIndentedString(fulfillments)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    insertedAt: ").append(toIndentedString(insertedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("id");
    openapiFields.add("grn");
    openapiFields.add("number");
    openapiFields.add("status");
    openapiFields.add("channel");
    openapiFields.add("market");
    openapiFields.add("locale");
    openapiFields.add("additionalInfo");
    openapiFields.add("documents");
    openapiFields.add("items");
    openapiFields.add("payments");
    openapiFields.add("shipments");
    openapiFields.add("paymentsInfo");
    openapiFields.add("shipmentsInfo");
    openapiFields.add("promotions");
    openapiFields.add("currency");
    openapiFields.add("subtotals");
    openapiFields.add("totals");
    openapiFields.add("vatIncluded");
    openapiFields.add("billingAddress");
    openapiFields.add("shippingAddress");
    openapiFields.add("customerInfo");
    openapiFields.add("cartGrn");
    openapiFields.add("onHold");
    openapiFields.add("historyEvents");
    openapiFields.add("fulfillments");
    openapiFields.add("notes");
    openapiFields.add("isDeleted");
    openapiFields.add("insertedAt");
    openapiFields.add("deletedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("locale");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderOrderData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderOrderData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderOrderData is not found in the empty JSON string", OrderOrderData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderOrderData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderOrderData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderOrderData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("grn") != null && !jsonObj.get("grn").isJsonNull()) && !jsonObj.get("grn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grn").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("market") != null && !jsonObj.get("market").isJsonNull()) && !jsonObj.get("market").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `market` to be a primitive type in the JSON string but got `%s`", jsonObj.get("market").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
          }

          // validate the optional field `documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            OrderDataDocument.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            OrderOrderDataItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            OrderPayment.validateJsonElement(jsonArraypayments.get(i));
          };
        }
      }
      if (jsonObj.get("shipments") != null && !jsonObj.get("shipments").isJsonNull()) {
        JsonArray jsonArrayshipments = jsonObj.getAsJsonArray("shipments");
        if (jsonArrayshipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipments` to be an array in the JSON string but got `%s`", jsonObj.get("shipments").toString()));
          }

          // validate the optional field `shipments` (array)
          for (int i = 0; i < jsonArrayshipments.size(); i++) {
            OrderShipment.validateJsonElement(jsonArrayshipments.get(i));
          };
        }
      }
      if (jsonObj.get("paymentsInfo") != null && !jsonObj.get("paymentsInfo").isJsonNull()) {
        JsonArray jsonArraypaymentsInfo = jsonObj.getAsJsonArray("paymentsInfo");
        if (jsonArraypaymentsInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentsInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentsInfo` to be an array in the JSON string but got `%s`", jsonObj.get("paymentsInfo").toString()));
          }

          // validate the optional field `paymentsInfo` (array)
          for (int i = 0; i < jsonArraypaymentsInfo.size(); i++) {
            OrderDataPaymentInfo.validateJsonElement(jsonArraypaymentsInfo.get(i));
          };
        }
      }
      if (jsonObj.get("shipmentsInfo") != null && !jsonObj.get("shipmentsInfo").isJsonNull()) {
        JsonArray jsonArrayshipmentsInfo = jsonObj.getAsJsonArray("shipmentsInfo");
        if (jsonArrayshipmentsInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipmentsInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipmentsInfo` to be an array in the JSON string but got `%s`", jsonObj.get("shipmentsInfo").toString()));
          }

          // validate the optional field `shipmentsInfo` (array)
          for (int i = 0; i < jsonArrayshipmentsInfo.size(); i++) {
            OrderDataShipmentInfo.validateJsonElement(jsonArrayshipmentsInfo.get(i));
          };
        }
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            OrderDataPromotionInfo.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        OrderCurrency.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        OrderPostalAddress.validateJsonElement(jsonObj.get("billingAddress"));
      }
      // validate the optional field `shippingAddress`
      if (jsonObj.get("shippingAddress") != null && !jsonObj.get("shippingAddress").isJsonNull()) {
        OrderPostalAddress.validateJsonElement(jsonObj.get("shippingAddress"));
      }
      // validate the optional field `customerInfo`
      if (jsonObj.get("customerInfo") != null && !jsonObj.get("customerInfo").isJsonNull()) {
        OrderDataCustomerInfo.validateJsonElement(jsonObj.get("customerInfo"));
      }
      if ((jsonObj.get("cartGrn") != null && !jsonObj.get("cartGrn").isJsonNull()) && !jsonObj.get("cartGrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartGrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cartGrn").toString()));
      }
      if (jsonObj.get("historyEvents") != null && !jsonObj.get("historyEvents").isJsonNull()) {
        JsonArray jsonArrayhistoryEvents = jsonObj.getAsJsonArray("historyEvents");
        if (jsonArrayhistoryEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("historyEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `historyEvents` to be an array in the JSON string but got `%s`", jsonObj.get("historyEvents").toString()));
          }

          // validate the optional field `historyEvents` (array)
          for (int i = 0; i < jsonArrayhistoryEvents.size(); i++) {
            OrderDataHistory.validateJsonElement(jsonArrayhistoryEvents.get(i));
          };
        }
      }
      if (jsonObj.get("fulfillments") != null && !jsonObj.get("fulfillments").isJsonNull()) {
        JsonArray jsonArrayfulfillments = jsonObj.getAsJsonArray("fulfillments");
        if (jsonArrayfulfillments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fulfillments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fulfillments` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillments").toString()));
          }

          // validate the optional field `fulfillments` (array)
          for (int i = 0; i < jsonArrayfulfillments.size(); i++) {
            OrderFulfillment.validateJsonElement(jsonArrayfulfillments.get(i));
          };
        }
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderOrderData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderOrderData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderOrderData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderOrderData.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderOrderData>() {
           @Override
           public void write(JsonWriter out, OrderOrderData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderOrderData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderOrderData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderOrderData
  * @throws IOException if the JSON string is invalid with respect to OrderOrderData
  */
  public static OrderOrderData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderOrderData.class);
  }

 /**
  * Convert an instance of OrderOrderData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

