/*
 * order Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_Order.ApiException;
import org.openapitools.client.model.OrderAddDocumentRequest;
import org.openapitools.client.model.OrderApproveOrderRequest;
import org.openapitools.client.model.OrderAssignShipmentRequest;
import org.openapitools.client.model.OrderCalculateRefundRequest;
import org.openapitools.client.model.OrderCalculateRefundResponse;
import org.openapitools.client.model.OrderCancelFulfillmentRequest;
import org.openapitools.client.model.OrderCancelOrderRequest;
import org.openapitools.client.model.OrderCancelShipmentRequest;
import org.openapitools.client.model.OrderCompleteShipmentPackingRequest;
import org.openapitools.client.model.OrderCreateFulfillmentRequest;
import org.openapitools.client.model.OrderCreateHistoryRequest;
import org.openapitools.client.model.OrderCreateOrderRequest;
import org.openapitools.client.model.OrderCreatePaymentRequest;
import org.openapitools.client.model.OrderCreatePaymentTransactionRequest;
import org.openapitools.client.model.OrderCreateRefundRequest;
import org.openapitools.client.model.OrderCreateRefundTransactionRequest;
import org.openapitools.client.model.OrderCreateShipmentRequest;
import org.openapitools.client.model.OrderDataHistory;
import org.openapitools.client.model.OrderDeleteOrderRequest;
import org.openapitools.client.model.OrderFulfillment;
import org.openapitools.client.model.OrderGetFulfillmentRequest;
import org.openapitools.client.model.OrderGetOrderByCartIdRequest;
import org.openapitools.client.model.OrderGetOrderByOrderNumberRequest;
import org.openapitools.client.model.OrderGetOrderRequest;
import org.openapitools.client.model.OrderGetPaymentRequest;
import org.openapitools.client.model.OrderGetShipmentRequest;
import org.openapitools.client.model.OrderGetTransactionRequest;
import org.openapitools.client.model.OrderHoldOrderRequest;
import org.openapitools.client.model.OrderImportOrderRequest;
import org.openapitools.client.model.OrderListFulfillmentsRequest;
import org.openapitools.client.model.OrderListFulfillmentsResponse;
import org.openapitools.client.model.OrderListOrdersByCustomerRequest;
import org.openapitools.client.model.OrderListOrdersByCustomerResponse;
import org.openapitools.client.model.OrderListOrdersByNumbersRequest;
import org.openapitools.client.model.OrderListOrdersByNumbersResponse;
import org.openapitools.client.model.OrderListOrdersRequest;
import org.openapitools.client.model.OrderListOrdersResponse;
import org.openapitools.client.model.OrderListShipmentsRequest;
import org.openapitools.client.model.OrderListShipmentsResponse;
import org.openapitools.client.model.OrderOrderData;
import org.openapitools.client.model.OrderPayment;
import org.openapitools.client.model.OrderPrintOrdersLabelsRequest;
import org.openapitools.client.model.OrderPrintOrdersLabelsResponse;
import org.openapitools.client.model.OrderQuashFulfillmentRequest;
import org.openapitools.client.model.OrderQuashShipmentRequest;
import org.openapitools.client.model.OrderReceiveFulfillmentRequest;
import org.openapitools.client.model.OrderRefund;
import org.openapitools.client.model.OrderRemoveDocumentByCodeRequest;
import org.openapitools.client.model.OrderReportFulfillmentErrorRequest;
import org.openapitools.client.model.OrderReportFulfillmentNotResolvableRequest;
import org.openapitools.client.model.OrderReportFulfillmentReadyRequest;
import org.openapitools.client.model.OrderReportShipmentDeliveryRequest;
import org.openapitools.client.model.OrderReportShipmentMissingStockRequest;
import org.openapitools.client.model.OrderResolveShipmentMissingStockRequest;
import org.openapitools.client.model.OrderRetryFulfillmentRequest;
import org.openapitools.client.model.OrderSearchOrdersRequest;
import org.openapitools.client.model.OrderSearchOrdersResponse;
import org.openapitools.client.model.OrderSendFulfillmentRequest;
import org.openapitools.client.model.OrderSendOrderNotificationRequest;
import org.openapitools.client.model.OrderShipment;
import org.openapitools.client.model.OrderStartFulfillmentProcessingRequest;
import org.openapitools.client.model.OrderStartShipmentProcessingRequest;
import org.openapitools.client.model.OrderTransaction;
import org.openapitools.client.model.OrderUnholdOrderRequest;
import org.openapitools.client.model.OrderUpdateOrderRequest;
import org.openapitools.client.model.OrderUpdatePaymentRequest;
import org.openapitools.client.model.RpcStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Disabled
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    /**
     * Approve Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveOrderTest() throws ApiException {
        OrderApproveOrderRequest body = null;
        Object response = api.approveOrder(body);
        // TODO: test validations
    }

    /**
     * Assign Shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignShipmentTest() throws ApiException {
        OrderAssignShipmentRequest body = null;
        Object response = api.assignShipment(body);
        // TODO: test validations
    }

    /**
     * Calculate Refund
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateRefundTest() throws ApiException {
        OrderCalculateRefundRequest body = null;
        OrderCalculateRefundResponse response = api.calculateRefund(body);
        // TODO: test validations
    }

    /**
     * Cancel Fulfillment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelFulfillmentTest() throws ApiException {
        OrderCancelFulfillmentRequest body = null;
        Object response = api.cancelFulfillment(body);
        // TODO: test validations
    }

    /**
     * Cancel Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelOrderTest() throws ApiException {
        OrderCancelOrderRequest body = null;
        Object response = api.cancelOrder(body);
        // TODO: test validations
    }

    /**
     * Cancel Shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelShipmentTest() throws ApiException {
        OrderCancelShipmentRequest body = null;
        Object response = api.cancelShipment(body);
        // TODO: test validations
    }

    /**
     * Complete Shipment Packing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeShipmentPackingTest() throws ApiException {
        OrderCompleteShipmentPackingRequest body = null;
        Object response = api.completeShipmentPacking(body);
        // TODO: test validations
    }

    /**
     * Create Fulfillment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFulfillmentTest() throws ApiException {
        OrderCreateFulfillmentRequest body = null;
        OrderFulfillment response = api.createFulfillment(body);
        // TODO: test validations
    }

    /**
     * Create Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderTest() throws ApiException {
        OrderCreateOrderRequest body = null;
        OrderOrderData response = api.createOrder(body);
        // TODO: test validations
    }

    /**
     * Create Order History
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderHistoryTest() throws ApiException {
        OrderCreateHistoryRequest body = null;
        OrderDataHistory response = api.createOrderHistory(body);
        // TODO: test validations
    }

    /**
     * Create Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentTest() throws ApiException {
        OrderCreatePaymentRequest body = null;
        OrderPayment response = api.createPayment(body);
        // TODO: test validations
    }

    /**
     * Create Payment Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentTransactionTest() throws ApiException {
        OrderCreatePaymentTransactionRequest body = null;
        OrderTransaction response = api.createPaymentTransaction(body);
        // TODO: test validations
    }

    /**
     * Create Refund
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRefundTest() throws ApiException {
        OrderCreateRefundRequest body = null;
        OrderRefund response = api.createRefund(body);
        // TODO: test validations
    }

    /**
     * Create Refund Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRefundTransactionTest() throws ApiException {
        OrderCreateRefundTransactionRequest body = null;
        OrderTransaction response = api.createRefundTransaction(body);
        // TODO: test validations
    }

    /**
     * Create Shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createShipmentTest() throws ApiException {
        OrderCreateShipmentRequest body = null;
        OrderShipment response = api.createShipment(body);
        // TODO: test validations
    }

    /**
     * Delete Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderTest() throws ApiException {
        OrderDeleteOrderRequest body = null;
        Object response = api.deleteOrder(body);
        // TODO: test validations
    }

    /**
     * Get Fulfillment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFulfillmentTest() throws ApiException {
        OrderGetFulfillmentRequest body = null;
        OrderFulfillment response = api.getFulfillment(body);
        // TODO: test validations
    }

    /**
     * Get Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderTest() throws ApiException {
        OrderGetOrderRequest body = null;
        OrderOrderData response = api.getOrder(body);
        // TODO: test validations
    }

    /**
     * Get Order by Cart ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderByCartIdTest() throws ApiException {
        OrderGetOrderByCartIdRequest body = null;
        OrderOrderData response = api.getOrderByCartId(body);
        // TODO: test validations
    }

    /**
     * Get Order by Order Number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderByOrderNumberTest() throws ApiException {
        OrderGetOrderByOrderNumberRequest body = null;
        OrderOrderData response = api.getOrderByOrderNumber(body);
        // TODO: test validations
    }

    /**
     * Get Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentTest() throws ApiException {
        OrderGetPaymentRequest body = null;
        OrderPayment response = api.getPayment(body);
        // TODO: test validations
    }

    /**
     * Get Shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShipmentTest() throws ApiException {
        OrderGetShipmentRequest body = null;
        OrderShipment response = api.getShipment(body);
        // TODO: test validations
    }

    /**
     * Get Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionTest() throws ApiException {
        OrderGetTransactionRequest body = null;
        OrderTransaction response = api.getTransaction(body);
        // TODO: test validations
    }

    /**
     * Hold Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void holdOrderTest() throws ApiException {
        OrderHoldOrderRequest body = null;
        Object response = api.holdOrder(body);
        // TODO: test validations
    }

    /**
     * Import Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importOrderTest() throws ApiException {
        OrderImportOrderRequest body = null;
        OrderOrderData response = api.importOrder(body);
        // TODO: test validations
    }

    /**
     * List Fulfillments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFulfillmentsTest() throws ApiException {
        OrderListFulfillmentsRequest body = null;
        OrderListFulfillmentsResponse response = api.listFulfillments(body);
        // TODO: test validations
    }

    /**
     * List Orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrdersTest() throws ApiException {
        OrderListOrdersRequest body = null;
        OrderListOrdersResponse response = api.listOrders(body);
        // TODO: test validations
    }

    /**
     * List Orders by Customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrdersByCustomerTest() throws ApiException {
        OrderListOrdersByCustomerRequest body = null;
        OrderListOrdersByCustomerResponse response = api.listOrdersByCustomer(body);
        // TODO: test validations
    }

    /**
     * List Orders by Numbers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrdersByNumbersTest() throws ApiException {
        OrderListOrdersByNumbersRequest body = null;
        OrderListOrdersByNumbersResponse response = api.listOrdersByNumbers(body);
        // TODO: test validations
    }

    /**
     * List Shipments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listShipmentsTest() throws ApiException {
        OrderListShipmentsRequest body = null;
        OrderListShipmentsResponse response = api.listShipments(body);
        // TODO: test validations
    }

    /**
     * Documents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderAddDocumentTest() throws ApiException {
        OrderAddDocumentRequest body = null;
        Object response = api.orderAddDocument(body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderRemoveDocumentByCodeTest() throws ApiException {
        OrderRemoveDocumentByCodeRequest body = null;
        Object response = api.orderRemoveDocumentByCode(body);
        // TODO: test validations
    }

    /**
     * Print Orders Labels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void printOrdersLabelsTest() throws ApiException {
        OrderPrintOrdersLabelsRequest body = null;
        OrderPrintOrdersLabelsResponse response = api.printOrdersLabels(body);
        // TODO: test validations
    }

    /**
     * Quash Fulfillment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quashFulfillmentTest() throws ApiException {
        OrderQuashFulfillmentRequest body = null;
        Object response = api.quashFulfillment(body);
        // TODO: test validations
    }

    /**
     * Quash Shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quashShipmentTest() throws ApiException {
        OrderQuashShipmentRequest body = null;
        Object response = api.quashShipment(body);
        // TODO: test validations
    }

    /**
     * Receive Fulfillment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void receiveFulfillmentTest() throws ApiException {
        OrderReceiveFulfillmentRequest body = null;
        Object response = api.receiveFulfillment(body);
        // TODO: test validations
    }

    /**
     * Report Fulfillment Error
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportFulfillmentErrorTest() throws ApiException {
        OrderReportFulfillmentErrorRequest body = null;
        Object response = api.reportFulfillmentError(body);
        // TODO: test validations
    }

    /**
     * Report Fulfillment Not Resolvable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportFulfillmentNotResolvableTest() throws ApiException {
        OrderReportFulfillmentNotResolvableRequest body = null;
        Object response = api.reportFulfillmentNotResolvable(body);
        // TODO: test validations
    }

    /**
     * Report Fulfillment Ready
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportFulfillmentReadyTest() throws ApiException {
        OrderReportFulfillmentReadyRequest body = null;
        Object response = api.reportFulfillmentReady(body);
        // TODO: test validations
    }

    /**
     * Report Shipment Delivery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportShipmentDeliveryTest() throws ApiException {
        OrderReportShipmentDeliveryRequest body = null;
        Object response = api.reportShipmentDelivery(body);
        // TODO: test validations
    }

    /**
     * Report Shipment Missing Stock
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportShipmentMissingStockTest() throws ApiException {
        OrderReportShipmentMissingStockRequest body = null;
        Object response = api.reportShipmentMissingStock(body);
        // TODO: test validations
    }

    /**
     * Resolve Shipment Missing Stock
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveShipmentMissingStockTest() throws ApiException {
        OrderResolveShipmentMissingStockRequest body = null;
        Object response = api.resolveShipmentMissingStock(body);
        // TODO: test validations
    }

    /**
     * Retry Fulfillment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryFulfillmentTest() throws ApiException {
        OrderRetryFulfillmentRequest body = null;
        Object response = api.retryFulfillment(body);
        // TODO: test validations
    }

    /**
     * Search Orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchOrdersTest() throws ApiException {
        OrderSearchOrdersRequest body = null;
        OrderSearchOrdersResponse response = api.searchOrders(body);
        // TODO: test validations
    }

    /**
     * Send Fulfillment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendFulfillmentTest() throws ApiException {
        OrderSendFulfillmentRequest body = null;
        Object response = api.sendFulfillment(body);
        // TODO: test validations
    }

    /**
     * Send Order Notification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendOrderNotificationTest() throws ApiException {
        OrderSendOrderNotificationRequest body = null;
        Object response = api.sendOrderNotification(body);
        // TODO: test validations
    }

    /**
     * Start Fulfillment Processing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startFulfillmentProcessingTest() throws ApiException {
        OrderStartFulfillmentProcessingRequest body = null;
        Object response = api.startFulfillmentProcessing(body);
        // TODO: test validations
    }

    /**
     * Start Shipment Processing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startShipmentProcessingTest() throws ApiException {
        OrderStartShipmentProcessingRequest body = null;
        Object response = api.startShipmentProcessing(body);
        // TODO: test validations
    }

    /**
     * Unhold Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unholdOrderTest() throws ApiException {
        OrderUnholdOrderRequest body = null;
        Object response = api.unholdOrder(body);
        // TODO: test validations
    }

    /**
     * Update Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        OrderUpdateOrderRequest body = null;
        OrderOrderData response = api.updateOrder(body);
        // TODO: test validations
    }

    /**
     * Update Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentTest() throws ApiException {
        OrderUpdatePaymentRequest body = null;
        OrderPayment response = api.updatePayment(body);
        // TODO: test validations
    }

}
